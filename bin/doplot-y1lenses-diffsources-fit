#!/usr/bin/env python

import fitsio
import numpy as np
import hickory
from compare_y1_y3.fitting import fit_nfw_lin
from compare_y1_y3.util import (
    Y1_CHI_FACTORS,
    # interpolate_y1_onto_y3,
    print_stats,
    add_rescaled_data,
    write_delta_sigma,
    get_cosmo_pars_from_cc,
)
# import dsfit
from colossus.cosmology.cosmology import setCosmology as ccSetCosmology

# public data vectors for Y1
y1lenses_y1sources = '2pt_NG_mcal_1110.fits'

# y1lenses_y3sources = '/home/esheldon/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa

# we use the unboosted data vectors for comparision with Y1 unboosted data
# y1lenses_y3sources_noboost = '/home/esheldon/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_twopointfile.fits'  # noqa

# new version limiting y3 sources to y1 footprint and using mean R from
# that


y1lenses_y3sources_noboost_y1area = '~/git/xcorr/runs/y1lenses/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT_y1footprint/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_twopointfile.fits'  # noqa

y1lenses_y3sources_boosted_y1area = '~/git/xcorr/runs/y1lenses/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT_y1footprint/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa

# y1lenses_y3sources_boost_factors = '~/git/xcorr/runs/y1lenses/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT_y1footprint/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/boost_factor_twopointfile.fits'  # noqa

# Y1 but run with new pipeline, so only will use boost factors
y1lenses_y1sources_boost_factors = '~/git/xcorr/runs/y1sources/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_y1/zs_bpz/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/boost_factor_twopointfile.fits'  # noqa

y1lenses_y1sources_boosted = '~/git/xcorr/runs/y1sources/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_y1/zs_bpz/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa

# we need to get the n(zl) from here, the new run did not have the correct
# values in it
# also has gammat for y3y3
y3sources = '2pt_NG_final_2ptunblind_11_13_20_wnz.fits'


# (sbin, lbin),
BINS2FIT = [
    (1, 1),
    (1, 2),
    (1, 3),  # marginal
    (1, 4),  # *
    # (1, 5),  # *
    #
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),   # *
    # (2, 5),   # *
    #
    (3, 1),
    (3, 2),
    (3, 3),
    (3, 4),  # *
    # (3, 5),  # *
    #
    (4, 1),
    (4, 2),
    (4, 3),
    (4, 4),  # *
    # (4, 5),  # *

]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--seed', type=int, required=True)
    parser.add_argument('--ntrial', type=int, default=1000)
    parser.add_argument('--sample', action='store_true')
    parser.add_argument('--use-y1-m', action='store_true')
    parser.add_argument(
        '--use-rerun', action='store_true',
        help='use the rerun of Y1 sources and lenses using Y3 code',
    )
    return parser.parse_args()


def read_data_rerun():
    """
    read data for both y1 and y3 sources.
    Returns
    --------
    data: dict
        Dictionary of arrays, keyed by
            y1y1: y1 lenses, y1 sources
            y1y3: y1 lenses, y3 sources
        The data for each key is
            'gammat': The gamma_t data vector for all l/s bins
            'nzl': redshift and n(z) for the lenses for all l/s bins
            'nzs': redshift and n(z) for the sources for all l/s bins
    """

    sname_y1y3 = 'nz_source_realisation_%d'

    with fitsio.FITS(y3sources, lower=True) as fits:
        nzs = fits['nz_source'][:]
        nzs_samples = []
        for i in range(1000):
            sname = sname_y1y3 % i
            tmp = fits[sname][:]
            nzs_samples.append(tmp)

    gt_y1y1 = fitsio.read(
        y1lenses_y1sources_boosted, ext='gammat', lower=True,
    )
    gtcov_y1y1 = fitsio.read(
        y1lenses_y1sources_boosted, ext='covmat', lower=True,
    )

    gt_y1y3 = fitsio.read(
        y1lenses_y3sources_boosted_y1area, ext='gammat', lower=True,
    )
    gtcov_y1y3 = fitsio.read(
        y1lenses_y3sources_boosted_y1area, ext='covmat', lower=True,
    )

    data = {
        'y1y1': {
            'gammat': gt_y1y1,
            'gammat_cov': gtcov_y1y1,
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs': fitsio.read(y1lenses_y1sources, ext='nz_source', lower=True),  # noqa
            'chi_factors': Y1_CHI_FACTORS,
        },
        'y1y3': {
            'gammat': gt_y1y3,
            'gammat_cov':  gtcov_y1y3,
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs_samples': nzs_samples,
            'nzs': nzs,
            'chi_factors': Y1_CHI_FACTORS,
        }
    }

    if False:
        plt = hickory.Plot(figsize=(8, 8))
        plt.imshow(data['y1y3']['gammat_cov'])
        plt.show(dpi=300)

    return data


def read_data():
    """
    read data for both y1 and y3 sources.
    Returns
    --------
    data: dict
        Dictionary of arrays, keyed by
            y1y1: y1 lenses, y1 sources
            y1y3: y1 lenses, y3 sources
        The data for each key is
            'gammat': The gamma_t data vector for all l/s bins
            'nzl': redshift and n(z) for the lenses for all l/s bins
            'nzs': redshift and n(z) for the sources for all l/s bins
    """

    bfdata = fitsio.read(
        y1lenses_y1sources_boost_factors,
        ext='boost_factor', lower=True,
    )
    boost_factors = bfdata['value']

    sname_y1y3 = 'nz_source_realisation_%d'

    with fitsio.FITS(y3sources, lower=True) as fits:
        nzs = fits['nz_source'][:]
        nzs_samples = []
        for i in range(1000):
            sname = sname_y1y3 % i
            tmp = fits[sname][:]
            nzs_samples.append(tmp)

    gt_y1y1 = fitsio.read(y1lenses_y1sources, ext='gammat', lower=True)
    num = gt_y1y1['value'].size

    gtcov_y1y1 = fitsio.read(y1lenses_y1sources, ext='covmat', lower=True)
    gtcov_y1y1 = gtcov_y1y1[400:400+num, 400:400+num]

    gt_y1y3 = fitsio.read(
        y1lenses_y3sources_boosted_y1area, ext='gammat', lower=True,
    )
    gtcov_y1y3 = fitsio.read(
        y1lenses_y3sources_boosted_y1area, ext='covmat', lower=True,
    )

    gt_y1y1['value'] *= boost_factors
    # gt_y1y3['value'] *= boost_factors

    data = {
        'y1y1': {
            'gammat': gt_y1y1,
            'gammat_cov': gtcov_y1y1,
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs': fitsio.read(y1lenses_y1sources, ext='nz_source', lower=True),  # noqa
            'chi_factors': Y1_CHI_FACTORS,
        },
        'y1y3': {
            'gammat': gt_y1y3,
            'gammat_cov':  gtcov_y1y3,
            # 'gammat':  fitsio.read(y3sources, ext='gammat', lower=True),  # noqa
            # 'gammat_cov':  fitsio.read(y3sources, ext='covmat', lower=True)[400:, 400:],  # noqa
            # 'nzl': fitsio.read(y1lenses_y3sources_noboost_y1area, ext='nz_lens', lower=True),  # noqa
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs_samples': nzs_samples,
            'nzs': nzs,
            'chi_factors': Y1_CHI_FACTORS,
        }
    }

    if False:
        plt = hickory.Plot(figsize=(8, 8))
        plt.imshow(data['y1y3']['gammat_cov'])
        plt.show(dpi=300)

    return data


def make_table():
    tab = hickory.Table(
        nrows=4,
        ncols=4,
        # figsize=(14, 9.3),
        figsize=(16, 14),
        # figsize=(18, 14),
    )
    for ax in tab.axes:
        ax.set(
            xlabel=r"$r$ [Mpc]",
            ylabel=r"$\Delta\Sigma ~ [\mathrm{M}_{\odot} \mathrm{pc}^{-2}]$",
            xlim=(0.25, 185),
            ylim=(0.025, 45),
        )
        ax.set_xscale('log')
        ax.set_yscale('log')

    return tab


def do_fits(*, rng, data, cc):

    tab_y1y1 = make_table()
    tab_y1y3 = make_table()
    y1y1_reslist = []
    y1y3_reslist = []

    iax = 0
    for sbin, lbin in BINS2FIT:
        res_y1y1 = fit_nfw_lin(
            rng=rng, data=data['y1y1'],
            lbin=lbin, sbin=sbin, plt=tab_y1y1.axes[iax],
            cc=cc,
        )
        res_y1y3 = fit_nfw_lin(
            rng=rng, data=data['y1y3'],
            lbin=lbin, sbin=sbin, plt=tab_y1y3.axes[iax],
            cc=cc,
        )

        y1y1_reslist.append(res_y1y1)
        y1y3_reslist.append(res_y1y3)

        iax += 1

    tab_y1y1.axes[0].legend()
    tab_y1y3.axes[0].legend()

    return y1y1_reslist, y1y3_reslist, tab_y1y1, tab_y1y3


def plot_hist_rat(data, key):
    plt = hickory.Plot(
        xlabel=r'$\mathrm{log}_{10}(%s^{y1}/%s^{y3})$' % (key, key)
    )
    plt.hist(np.log10(data), bins=20)
    plt.show()


def plot2hist(*, data_y1y1, data_y1y3, key, dolog=True):

    if dolog:
        xlabel = r'$\mathrm{log}_{10}(%s)$' % key

        ld1 = np.log10(data_y1y1)
        ld3 = np.log10(data_y1y3)
    else:
        xlabel = key
        ld1 = data_y1y1
        ld3 = data_y1y3

    plt = hickory.Plot(
        xlabel=xlabel,
    )

    xmin = min(ld1.min(), ld3.min())
    xmax = max(ld1.max(), ld3.max())

    binsize = 0.2*ld1.std()

    alpha = 0.5
    plt.hist(
        ld1,
        min=xmin, max=xmax,
        binsize=binsize, label='y1y1',
        alpha=alpha,
    )
    plt.hist(
        ld3,
        min=xmin, max=xmax,
        binsize=binsize, label='y1y3',
        alpha=alpha,
    )
    plt.legend()
    # plt.show()
    fname = '%s-hists.png' % key
    print('writing:', fname)
    plt.savefig(fname, dpi=150)

    return plt


def main():
    args = get_args()
    rng = np.random.RandomState(args.seed)

    cc = ccSetCosmology('planck18')
    # cosmo_pars = dsfit.cosmopars.get_cosmo_pars()
    cosmo_pars = get_cosmo_pars_from_cc(cc)

    if args.use_rerun:
        data = read_data_rerun()
    else:
        data = read_data()

    y1y1_fname = 'fits-y1y1.png'
    y1y3_fname = 'fits-y1y3.png'
    if args.use_y1_m:
        y1y1_fname = y1y1_fname.replace('.png', '-y1m.png')
        y1y3_fname = y1y3_fname.replace('.png', '-y1m.png')
    if args.use_rerun:
        y1y1_fname = y1y1_fname.replace('.png', '-rerun.png')
        y1y3_fname = y1y3_fname.replace('.png', '-rerun.png')

    if args.sample:
        raise RuntimeError('set up sampling')
        for i in range(args.ntrial):
            add_rescaled_data(
                data=data['y1y1'],
                source_type='y1',
                sample=args.sample,
                use_y1_m=args.use_y1_m,
                cosmo_pars=cosmo_pars,
            )
            add_rescaled_data(
                data=data['y1y3'],
                source_type='y3',
                sample=args.sample,
                use_y1_m=args.use_y1_m,
                cosmo_pars=cosmo_pars,
            )

            y1y1_reslist, y1y3_reslist, tab_y1y1, tab_y1y3 = do_fits(
                rng=rng, data=data, cc=cc,
            )

    else:
        add_rescaled_data(
            data=data['y1y1'], source_type='y1',
            use_y1_m=args.use_y1_m,
            cosmo_pars=cosmo_pars,
        )
        add_rescaled_data(
            data=data['y1y3'], source_type='y3',
            use_y1_m=args.use_y1_m,
            cosmo_pars=cosmo_pars,
        )

        y1y1_ds_file = 'y1lenses-y1sources-y1area-delta-sigma.fits'
        write_delta_sigma(filename=y1y1_ds_file, data=data['y1y1'])
        y1y3_ds_file = 'y1lenses-y3sources-y1area-delta-sigma.fits'
        write_delta_sigma(filename=y1y3_ds_file, data=data['y1y3'])

        y1y1_reslist, y1y3_reslist, tab_y1y1, tab_y1y3 = do_fits(
            rng=rng, data=data, cc=cc,
        )
        print_stats(reslist1=y1y1_reslist, reslist2=y1y3_reslist)

        dpi = 75
        print('writing:', y1y1_fname)
        tab_y1y1.savefig(y1y1_fname, dpi=dpi)
        print('writing:', y1y3_fname)
        tab_y1y3.savefig(y1y3_fname, dpi=dpi)

    # print('amp: %g +/- %g' % (amp, amp_err))


if __name__ == '__main__':
    main()
