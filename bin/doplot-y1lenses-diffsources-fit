#!/usr/bin/env python

import fitsio
import numpy as np
from compare_y1_y3.util import (
    Y3_MVALS,
    Y1_MVAL,
    Y1_CHI_FACTORS,
    Y1_ZS_OFFSETS,
    interpolate_y1_onto_y3,
    inv_sigma_crit_eff_fast,
    fit_amp,
)

# public data vectors for Y1
y1lenses_y1sources = '2pt_NG_mcal_1110.fits'

# y1lenses_y3sources = '/home/esheldon/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa

# we use the unboosted data vectors for comparision with Y1 unboosted data
# y1lenses_y3sources_noboost = '/home/esheldon/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_twopointfile.fits'  # noqa

# new version limiting y3 sources to y1 footprint and using mean R from
# that


y1lenses_y3sources_noboost_y1area = '~/git/xcorr/runs/y1lenses/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT_y1footprint/zslim_som/zs_som/redmagic_y1/zllim_y1/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_twopointfile.fits'  # noqa

# we need to get the n(zl) from here, the new run did not have the correct
# values in it
# also has gammat for y3y3
y3sources = '2pt_NG_final_2ptunblind_11_13_20_wnz.fits'


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--ntrial', type=int, default=1000)
    parser.add_argument('--sample', action='store_true')
    return parser.parse_args()


def read_data():
    """
    read data for both y1 and y3 sources.
    Returns
    --------
    data: dict
        Dictionary of arrays, keyed by
            y1y1: y1 lenses, y1 sources
            y1y3: y1 lenses, y3 sources
        The data for each key is
            'gammat': The gamma_t data vector for all l/s bins
            'nzl': redshift and n(z) for the lenses for all l/s bins
            'nzs': redshift and n(z) for the sources for all l/s bins
    """
    sname_y1y3 = 'nz_source_realisation_%d'

    with fitsio.FITS(y3sources, lower=True) as fits:
        nzs = fits['nz_source'][:]
        nzs_samples = []
        for i in range(1000):
            sname = sname_y1y3 % i
            tmp = fits[sname][:]
            nzs_samples.append(tmp)

    data = {
        'y1y1': {
            'gammat': fitsio.read(y1lenses_y1sources, ext='gammat', lower=True),  # noqa
            'gammat_cov': fitsio.read(y1lenses_y1sources, ext='covmat', lower=True)[400:, 400:],  # noqa
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs': fitsio.read(y1lenses_y1sources, ext='nz_source', lower=True),  # noqa
        },
        'y1y3': {
            # 'gammat':  fitsio.read(y1lenses_y3sources_noboost, ext='gammat', lower=True),  # noqa
            'gammat':  fitsio.read(y1lenses_y3sources_noboost_y1area, ext='gammat', lower=True),  # noqa
            'gammat_cov':  fitsio.read(y1lenses_y3sources_noboost_y1area, ext='covmat', lower=True),  # noqa
            'nzl': fitsio.read(y1lenses_y1sources, ext='nz_lens', lower=True),  # noqa
            'nzs_samples': nzs_samples,
            'nzs': nzs,
        }
    }

    return data


def get_nofz(*, data, lbin, sbin, sample=False):
    """
    get n(z) data for the given lens and source bin.  A random y3 source n(z)
    is used each time this code is called


    the Y1 n(z) are shifted according to the prior each time this is called

    data: dict
        Dictionary of arrays, keyed by
            y1y1: y1 lenses, y1 sources
            y1y3: y1 lenses, y3 sources
        The data for each key is
            'gammat': The gamma_t data vector for all l/s bins
            'nzl': redshift and n(z) for the lenses for all l/s bins
            'nzs': redshift and n(z) for the sources for all l/s bins
    lbin: int
        lens bin, 1 offset
    sbin: int
        source bin, 1 offst

    Returns
    -------
    dict keyed by y1y1 or y1y3 with the particular data from the
    requested lens/source bins.  Each key has entries
        'lzbin': lens z grid
        'lnofz': n(zl) on the grid
        'szbin': source z grid
        'snofz': n(zs) on z grid
    """

    if sample:
        nsamp = len(data['y1y3']['nzs_samples'])
        i = np.random.randint(nsamp)
        y1y3_nzs = data['y1y3']['nzs_samples'][i]
    else:
        y1y3_nzs = data['y1y3']['nzs']

    lbin_name = 'bin%d' % lbin
    sbin_name = 'bin%d' % sbin

    y1_zs = data['y1y1']['nzs']['z_mid']
    y1_nofzs = data['y1y1']['nzs'][sbin_name]

    z1off = Y1_ZS_OFFSETS[sbin-1][0]
    if sample:
        woff = Y1_ZS_OFFSETS[sbin-1][1]
        z1off = z1off + np.random.normal(scale=woff)

    y1_zs = y1_zs + z1off

    w, = np.where(y1_zs > 0)
    y1_zs = y1_zs[w]
    y1_nofzs = y1_nofzs[w]

    zdata = {
        'y1y1': {
            'lzbin': data['y1y1']['nzl']['z_mid'],
            'lnofz': data['y1y1']['nzl'][lbin_name],
            'szbin': y1_zs,
            'snofz': y1_nofzs,
        },
        'y1y3': {
            'lzbin': data['y1y3']['nzl']['z_mid'],
            'lnofz': data['y1y3']['nzl'][lbin_name],
            'szbin': y1y3_nzs['z_mid'],
            'snofz': y1y3_nzs[sbin_name],
        }
    }
    return zdata


def get_nofz_old(*, data, lbin, sbin, sample=False):
    """
    get n(z) data for the given lens and source bin.  A random y3 source n(z)
    is used each time this code is called


    the Y1 n(z) are shifted according to the prior each time this is called

    data: dict
        Dictionary of arrays, keyed by
            y1y1: y1 lenses, y1 sources
            y1y3: y1 lenses, y3 sources
        The data for each key is
            'gammat': The gamma_t data vector for all l/s bins
            'nzl': redshift and n(z) for the lenses for all l/s bins
            'nzs': redshift and n(z) for the sources for all l/s bins
    lbin: int
        lens bin, 1 offset
    sbin: int
        source bin, 1 offst

    Returns
    -------
    dict keyed by y1y1 or y1y3 with the particular data from the
    requested lens/source bins.  Each key has entries
        'lzbin': lens z grid
        'lnofz': n(zl) on the grid
        'szbin': source z grid
        'snofz': n(zs) on z grid
    """

    i = np.random.randint(1000)
    y1y3_nzs = data['y1y3']['nzs_samples'][i]

    lbin_name = 'bin%d' % lbin
    sbin_name = 'bin%d' % sbin

    moff = Y1_ZS_OFFSETS[sbin-1][0]
    woff = Y1_ZS_OFFSETS[sbin-1][1]
    z1off = np.random.normal(
        loc=moff,
        scale=woff,
    )

    y1_zs = data['y1y1']['nzs']['z_mid'] + z1off

    w, = np.where(y1_zs > 0)
    y1_zs = y1_zs[w]
    y1_nofzs = data['y1y1']['nzs'][sbin_name][w]

    zdata = {
        'y1y1': {
            'lzbin': data['y1y1']['nzl']['z_mid'],
            'lnofz': data['y1y1']['nzl'][lbin_name],
            'szbin': y1_zs,
            'snofz': y1_nofzs,
        },
        'y1y3': {
            'lzbin': data['y1y3']['nzl']['z_mid'],
            'lnofz': data['y1y3']['nzl'][lbin_name],
            'szbin': y1y3_nzs['z_mid'],
            'snofz': y1y3_nzs[sbin_name],
            # 'szbin': data['y1y3']['nzs']['z_mid'],
            # 'snofz': data['y1y3']['nzs'][sbin_name],
        }
    }
    return zdata


def extract_sub(*, data, type):
    covinv = data['covinv']
    gt_y1area = data['y1area']['gammat']['value']
    gt_y3area = data['y3area']['gammat']['value']

    # get bin example, radii all the same
    wbin0, = np.where(
        (data['y1area']['gammat']['bin1'] == 1) &
        (data['y1area']['gammat']['bin2'] == 1)
    )

    ang0 = data['y1area']['gammat']['ang'][wbin0]

    if type == 'lo':
        wr, = np.where(ang0 < 50)
    elif type == 'hi':
        wr, = np.where(ang0 > 50)

    points_per = wr.size
    totpoints = points_per*5*4

    gt_y1area_sub = np.zeros(totpoints)
    gt_y3area_sub = np.zeros(totpoints)
    covinv_sub = np.zeros((totpoints, totpoints))

    start = 0
    for sbin in [1, 2, 3, 4]:
        for lbin in [1, 2, 3, 4, 5]:

            w, = np.where(
                (data['y1area']['gammat']['bin1'] == lbin) &
                (data['y1area']['gammat']['bin2'] == sbin)
            )

            imin, imax = w[wr][0], w[wr][-1]+1

            end = start + wr.size

            gt_y1area_sub[start:end] = gt_y1area[imin:imax]
            gt_y3area_sub[start:end] = gt_y3area[imin:imax]
            covinv_sub[start:end, start:end] = covinv[imin:imax, imin:imax]

            start += wr.size

    return gt_y1area_sub, gt_y3area_sub, covinv_sub


def get_oneplusm(*, sbin, sample=False):
    """
    """
    y3_oneplusm = 1 + Y3_MVALS[sbin-1][0]
    y1_oneplusm = y3_oneplusm

    # y1_oneplusm = (1 + Y1_MVAL)
    if sample:
        y1_oneplusm += np.random.normal(scale=Y3_MVALS[sbin-1][1])

    return y1_oneplusm, y3_oneplusm


def rescale_data(*, data, sample=False):

    npts = data['y1y3']['gammat']['value'].size  # - 4*20
    out_data = {
        'y1y1': {
            'ds': np.zeros(npts),  # + np.nan,
            'dscov': np.zeros((npts, npts)),  # + np.nan,
            # 'ds': data['y1y1']['gammat']['value'],
            # 'dscov': data['y1y1']['gammat_cov'],
        },
        'y1y3': {
            'ds': np.zeros(npts),  # + np.nan,
            'dscov': np.zeros((npts, npts)),  # + np.nan,
            # 'ds': data['y1y3']['gammat']['value'],
            # 'dscov': data['y1y3']['gammat_cov'],
        }

    }
    # return out_data
    # print('npts:', npts)
    # print(data['y1y3']['gammat_cov'].shape)

    for sbin in range(1, 4+1):
        for lbin in range(1, 5+1):
        # for lbin in range(1, 4+1):

            zdata = get_nofz(data=data, lbin=lbin, sbin=sbin, sample=sample)

            siginv_y1y1 = inv_sigma_crit_eff_fast(
                zlbin=zdata['y1y1']['lzbin'],
                nzl=zdata['y1y1']['lnofz'],
                zsbin=zdata['y1y1']['szbin'],
                nzs=zdata['y1y1']['snofz'],
            )
            siginv_y1y3 = inv_sigma_crit_eff_fast(
                zlbin=zdata['y1y3']['lzbin'],
                nzl=zdata['y1y3']['lnofz'],
                zsbin=zdata['y1y3']['szbin'],
                nzs=zdata['y1y3']['snofz'],
            )

            print('siginv_y1y1:', siginv_y1y1)
            print('siginv_y1y3:', siginv_y1y3)

            y1_oneplusm, y3_oneplusm = get_oneplusm(sbin=sbin, sample=sample)

            wy1y1, = np.where(
                (data['y1y1']['gammat']['bin1'] == lbin) &
                (data['y1y1']['gammat']['bin2'] == sbin)
            )
            wy1y3, = np.where(
                (data['y1y3']['gammat']['bin1'] == lbin) &
                (data['y1y3']['gammat']['bin2'] == sbin)
            )

            fac_y1y1 = 1.0/y1_oneplusm/siginv_y1y1
            fac_y1y3 = 1.0/y3_oneplusm/siginv_y1y3

            ds_y1y1 = data['y1y1']['gammat']['value'][wy1y1] * fac_y1y1
            ds_y1y3 = data['y1y3']['gammat']['value'][wy1y3] * fac_y1y3

            imin, imax = wy1y1[0], wy1y1[-1]+1
            cov_y1y1 = (
                data['y1y1']['gammat_cov'][imin:imax, imin:imax] * fac_y1y1**2
            )
            imin, imax = wy1y3[0], wy1y3[-1]+1
            cov_y1y3 = (
                data['y1y3']['gammat_cov'][imin:imax, imin:imax] * fac_y1y3**2
            )
            # print('imin, imax:', imin, imax)

            # out_data['y1y1']['ds'][imin:imax] = ds_y1y1
            out_data['y1y1']['ds'][wy1y1] = ds_y1y1
            out_data['y1y1']['dscov'][imin:imax, imin:imax] = cov_y1y1

            # out_data['y1y3']['ds'][imin:imax] = ds_y1y3
            out_data['y1y3']['ds'][wy1y3] = ds_y1y3
            out_data['y1y3']['dscov'][imin:imax, imin:imax] = cov_y1y3

    return out_data


def do_fit(*, data, type):
    if type != 'all':
        gt_y1, gt_y3, covinv = extract_sub(data=data, type=type)
    else:
        # print('ds')
        # print(data['y1y3']['ds'])
        # print('dscov')
        # print(data['y1y3']['dscov'][0:30, 0:30])

        covinv = np.linalg.inv(data['y1y3']['dscov'])
        # print('covinv')
        # print(covinv)
        dsy1y1 = data['y1y1']['ds']
        dsy1y3 = data['y1y3']['ds']

    amp, amp_err = fit_amp(
        d=dsy1y1,
        t=dsy1y3,
        covinv=covinv,
    )
    return amp, amp_err


def do_one(*, data, sample):
    rescaled_data = rescale_data(data=data, sample=sample)
    return do_fit(data=rescaled_data, type='all')


def main():
    args = get_args()
    data = read_data()

    if args.sample:
        amps = np.zeros(args.ntrial)
        amp_errs = np.zeros(args.ntrial)

        for i in range(args.ntrial):
            rescaled_data = rescale_data(data=data, sample=args.sample)
            amp, amp_err = do_fit(data=rescaled_data, type='all')
            amps[i] = amp
            amp_errs[i] = amp_err
        amp = amps.mean()
        amp_err = amp_errs.mean()
        amp_std = amps.std()
        print("amp std:", amp_std)
    else:
        rescaled_data = rescale_data(data=data)
        amp, amp_err = do_fit(data=rescaled_data, type='all')

    print('amp: %g +/- %g' % (amp, amp_err))


if __name__ == '__main__':
    main()
