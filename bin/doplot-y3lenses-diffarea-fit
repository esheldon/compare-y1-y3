#!/usr/bin/env python

import fitsio
import numpy as np
import hickory
from compare_y1_y3.fitting import fit_nfw_lin
from compare_y1_y3.util import (
    Y3_CHI_FACTORS,
    print_stats,
    add_rescaled_data,
    write_delta_sigma,
    get_cosmo_pars_from_cc,
)

from colossus.cosmology.cosmology import setCosmology as ccSetCosmology


y3sources = '2pt_NG_final_2ptunblind_11_13_20_wnz.fits'

y3lenses_y3sources_y3area = '~/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT/zslim_som/zs_som/redmagic_x40randoms/zllim_y3/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa
y3lenses_y3sources_y1area = '~/git/xcorr/runs/Y3_mastercat___UNBLIND___final_v1.0_DO_NOT_USE_FOR_2PT_y1footprint/zslim_som/zs_som/redmagic_x40randoms_year1footprint/zllim_y3/lens_w_True/njk_150/thbin_2.50_250_20/bslop_0/source_only_close_to_lens_True_nside4/measurement/gt_boosted_twopointfile.fits'  # noqa

# (sbin, lbin),
BINS2FIT = [
    (1, 1),
    (1, 2),
    (1, 3),  # marginal
    (1, 4),  # *
    # (1, 5),  # *
    #
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),   # *
    # (2, 5),   # *
    #
    (3, 1),
    (3, 2),
    (3, 3),
    (3, 4),  # *
    # (3, 5),  # *
    #
    (4, 1),
    (4, 2),
    (4, 3),
    (4, 4),  # *
    # (4, 5),  # *

]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--seed', type=int, required=True)
    return parser.parse_args()


def read_data():
    data = {
        'y1area': {
            'gammat': fitsio.read(y3lenses_y3sources_y1area, ext='gammat', lower=True),  # noqa
            'gammat_cov': fitsio.read(y3lenses_y3sources_y1area, ext='covmat'),  # noqa
            # 'nzl': fitsio.read(y3lenses_y3sources_y1area, ext='nz_lens', lower=True),  # noqa
            # 'nzs': fitsio.read(y3lenses_y3sources_y1area, ext='nz_source', lower=True),  # noqa
            'nzl': fitsio.read(y3sources, ext='nz_lens', lower=True),  # noqa
            'nzs': fitsio.read(y3sources, ext='nz_source', lower=True),  # noqa
            'chi_factors': Y3_CHI_FACTORS,
        },
        'y3area': {
            'gammat':  fitsio.read(y3lenses_y3sources_y3area, ext='gammat', lower=True),  # noqa
            'gammat_cov':  fitsio.read(y3lenses_y3sources_y3area, ext='covmat'),  # noqa
            # 'nzl': fitsio.read(y3lenses_y3sources_y3area, ext='nz_lens', lower=True),  # noqa
            # 'nzs': fitsio.read(y3lenses_y3sources_y3area, ext='nz_source', lower=True),  # noqa
            'nzl': fitsio.read(y3sources, ext='nz_lens', lower=True),  # noqa
            'nzs': fitsio.read(y3sources, ext='nz_source', lower=True),  # noqa
            'chi_factors': Y3_CHI_FACTORS,
        }
    }

    return data


def do_fits(*, rng, data, cc):

    tab_y1area = make_table()
    tab_y3area = make_table()
    y1area_reslist = []
    y3area_reslist = []

    iax = 0
    for sbin, lbin in BINS2FIT:
        res_y1area = fit_nfw_lin(
            rng=rng, data=data['y1area'],
            lbin=lbin, sbin=sbin, plt=tab_y1area.axes[iax],
            cc=cc,
        )
        res_y3area = fit_nfw_lin(
            rng=rng, data=data['y3area'],
            lbin=lbin, sbin=sbin, plt=tab_y3area.axes[iax],
            cc=cc,
        )

        y1area_reslist.append(res_y1area)
        y3area_reslist.append(res_y3area)

        iax += 1

    tab_y1area.axes[0].legend()
    tab_y3area.axes[0].legend()

    return y1area_reslist, y3area_reslist, tab_y1area, tab_y3area


def make_table():
    tab = hickory.Table(
        nrows=4,
        ncols=4,
        # figsize=(14, 9.3),
        figsize=(16, 14),
        # figsize=(18, 14),
    )
    for ax in tab.axes:
        ax.set(
            xlabel=r"$r$ [Mpc]",
            ylabel=r"$\Delta\Sigma ~ [\mathrm{M}_{\odot} \mathrm{pc}^{-2}]$",
            xlim=(0.25, 185),
            ylim=(0.025, 45),
        )
        ax.set_xscale('log')
        ax.set_yscale('log')

    return tab


def main():
    args = get_args()
    rng = np.random.RandomState(args.seed)

    cc = ccSetCosmology('planck18')
    cosmo_pars = get_cosmo_pars_from_cc(cc)
    print('cosmo_pars:', cosmo_pars)

    data = read_data()

    add_rescaled_data(
        data=data['y1area'], source_type='y3',
        cosmo_pars=cosmo_pars,
    )
    add_rescaled_data(
        data=data['y3area'], source_type='y3',
        cosmo_pars=cosmo_pars,
    )

    y1area_ds_file = 'y3lenses-y3sources-y1area-delta-sigma.fits'
    write_delta_sigma(filename=y1area_ds_file, data=data['y1area'])
    y3area_ds_file = 'y3lenses-y3sources-y3area-delta-sigma.fits'
    write_delta_sigma(filename=y3area_ds_file, data=data['y3area'])

    y1area_reslist, y3area_reslist, tab_y1area, tab_y3area = do_fits(
        rng=rng, data=data, cc=cc,
    )
    print_stats(reslist1=y1area_reslist, reslist2=y3area_reslist)

    dpi = 75

    y1area_fname = 'fits-y3lenses-y1area.png'
    y3area_fname = 'fits-y3lenses-y3area.png'

    print('writing:', y1area_fname)
    tab_y1area.savefig(y1area_fname, dpi=dpi)

    print('writing:', y3area_fname)
    tab_y3area.savefig(y3area_fname, dpi=dpi)

    # print('amp: %g +/- %g' % (amp, amp_err))


if __name__ == '__main__':
    main()
